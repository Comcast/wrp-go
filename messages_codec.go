// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package wrp

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF88417 = 1
	codecSelferCcRAW8417  = 255
	// ----- value types used ----
	codecSelferValueTypeArray8417     = 10
	codecSelferValueTypeMap8417       = 9
	codecSelferValueTypeString8417    = 6
	codecSelferValueTypeInt8417       = 2
	codecSelferValueTypeUint8417      = 3
	codecSelferValueTypeFloat8417     = 4
	codecSelferValueTypeNil8417       = 1
	codecSelferBitsize8417            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil8417 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct8417 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer8417 struct{}

func codecSelfer8417False() bool { return false }

func init() {
	if codec1978.GenVersion != 16 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 16, need " + ver + ". Re-generate file: " + file)
	}
}

func (x *Message) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [18]bool{    // should field at this index be written?
			true,                             // Type
			x.Source != "",                   // Source
			x.Destination != "",              // Destination
			x.TransactionUUID != "",          // TransactionUUID
			x.ContentType != "",              // ContentType
			x.Accept != "",                   // Accept
			x.Status != nil,                  // Status
			x.RequestDeliveryResponse != nil, // RequestDeliveryResponse
			len(x.Headers) != 0,              // Headers
			len(x.Metadata) != 0,             // Metadata
			len(x.Spans) != 0,                // Spans
			x.IncludeSpans != nil,            // IncludeSpans
			x.Path != "",                     // Path
			len(x.Payload) != 0,              // Payload
			x.ServiceName != "",              // ServiceName
			x.URL != "",                      // URL
			len(x.PartnerIDs) != 0,           // PartnerIDs
			x.SessionID != "",                // SessionID
		}
		_ = yyq2
		var yyn9 bool = x.Status == nil
		var yyn10 bool = x.RequestDeliveryResponse == nil
		var yyn14 bool = x.IncludeSpans == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(18)
			z.EncWriteArrayElem()
			if yyxt21 := z.Extension(z.I2Rtid(x.Type)); yyxt21 != nil {
				z.EncExtension(x.Type, yyxt21)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayElem()
			if yyq2[1] {
				r.EncodeString(string(x.Source))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[2] {
				r.EncodeString(string(x.Destination))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[3] {
				r.EncodeString(string(x.TransactionUUID))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[4] {
				r.EncodeString(string(x.ContentType))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[5] {
				r.EncodeString(string(x.Accept))
			} else {
				r.EncodeString("")
			}
			if yyn9 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[6] {
					yy27 := *x.Status
					r.EncodeInt(int64(yy27))
				} else {
					r.EncodeNil()
				}
			}
			if yyn10 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[7] {
					yy29 := *x.RequestDeliveryResponse
					r.EncodeInt(int64(yy29))
				} else {
					r.EncodeNil()
				}
			}
			z.EncWriteArrayElem()
			if yyq2[8] {
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[9] {
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[10] {
				if x.Spans == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicestring(([][]string)(x.Spans), e)
				} // end block: if x.Spans slice == nil
			} else {
				r.EncodeNil()
			}
			if yyn14 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[11] {
					yy34 := *x.IncludeSpans
					r.EncodeBool(bool(yy34))
				} else {
					r.EncodeNil()
				}
			}
			z.EncWriteArrayElem()
			if yyq2[12] {
				r.EncodeString(string(x.Path))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[13] {
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[14] {
				r.EncodeString(string(x.ServiceName))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[15] {
				r.EncodeString(string(x.URL))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[16] {
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[17] {
				r.EncodeString(string(x.SessionID))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt42 := z.Extension(z.I2Rtid(x.Type)); yyxt42 != nil {
				z.EncExtension(x.Type, yyxt42)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			if yyq2[1] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"source\"")
				} else {
					r.EncodeString(`source`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Source))
			}
			if yyq2[2] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"dest\"")
				} else {
					r.EncodeString(`dest`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Destination))
			}
			if yyq2[3] {
				z.EncWriteMapElemKey()
				r.EncodeString(`transaction_uuid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.TransactionUUID))
			}
			if yyq2[4] {
				z.EncWriteMapElemKey()
				r.EncodeString(`content_type`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ContentType))
			}
			if yyq2[5] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"accept\"")
				} else {
					r.EncodeString(`accept`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Accept))
			}
			if yyq2[6] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"status\"")
				} else {
					r.EncodeString(`status`)
				}
				z.EncWriteMapElemValue()
				if yyn9 {
					r.EncodeNil()
				} else {
					yy48 := *x.Status
					r.EncodeInt(int64(yy48))
				}
			}
			if yyq2[7] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"rdr\"")
				} else {
					r.EncodeString(`rdr`)
				}
				z.EncWriteMapElemValue()
				if yyn10 {
					r.EncodeNil()
				} else {
					yy50 := *x.RequestDeliveryResponse
					r.EncodeInt(int64(yy50))
				}
			}
			if yyq2[8] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"headers\"")
				} else {
					r.EncodeString(`headers`)
				}
				z.EncWriteMapElemValue()
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			}
			if yyq2[9] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"metadata\"")
				} else {
					r.EncodeString(`metadata`)
				}
				z.EncWriteMapElemValue()
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			}
			if yyq2[10] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"spans\"")
				} else {
					r.EncodeString(`spans`)
				}
				z.EncWriteMapElemValue()
				if x.Spans == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicestring(([][]string)(x.Spans), e)
				} // end block: if x.Spans slice == nil
			}
			if yyq2[11] {
				z.EncWriteMapElemKey()
				r.EncodeString(`include_spans`)
				z.EncWriteMapElemValue()
				if yyn14 {
					r.EncodeNil()
				} else {
					yy55 := *x.IncludeSpans
					r.EncodeBool(bool(yy55))
				}
			}
			if yyq2[12] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"path\"")
				} else {
					r.EncodeString(`path`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Path))
			}
			if yyq2[13] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"payload\"")
				} else {
					r.EncodeString(`payload`)
				}
				z.EncWriteMapElemValue()
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			}
			if yyq2[14] {
				z.EncWriteMapElemKey()
				r.EncodeString(`service_name`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ServiceName))
			}
			if yyq2[15] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"url\"")
				} else {
					r.EncodeString(`url`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.URL))
			}
			if yyq2[16] {
				z.EncWriteMapElemKey()
				r.EncodeString(`partner_ids`)
				z.EncWriteMapElemValue()
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			}
			if yyq2[17] {
				z.EncWriteMapElemKey()
				r.EncodeString(`session_id`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.SessionID))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *Message) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = Message{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *Message) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		case "source":
			x.Source = (string)(string(r.DecodeStringAsBytes()))
		case "dest":
			x.Destination = (string)(string(r.DecodeStringAsBytes()))
		case "transaction_uuid":
			x.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
		case "content_type":
			x.ContentType = (string)(string(r.DecodeStringAsBytes()))
		case "accept":
			x.Accept = (string)(string(r.DecodeStringAsBytes()))
		case "status":
			if r.TryNil() {
				if x.Status != nil { // remove the if-true
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}
				*x.Status = (int64)(r.DecodeInt64())
			}
		case "rdr":
			if r.TryNil() {
				if x.RequestDeliveryResponse != nil { // remove the if-true
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}
				*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
			}
		case "headers":
			z.F.DecSliceStringX(&x.Headers, d)
		case "metadata":
			z.F.DecMapStringStringX(&x.Metadata, d)
		case "spans":
			h.decSliceSlicestring((*[][]string)(&x.Spans), d)
		case "include_spans":
			if r.TryNil() {
				if x.IncludeSpans != nil { // remove the if-true
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}
				*x.IncludeSpans = (bool)(r.DecodeBool())
			}
		case "path":
			x.Path = (string)(string(r.DecodeStringAsBytes()))
		case "payload":
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		case "service_name":
			x.ServiceName = (string)(string(r.DecodeStringAsBytes()))
		case "url":
			x.URL = (string)(string(r.DecodeStringAsBytes()))
		case "partner_ids":
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		case "session_id":
			x.SessionID = (string)(string(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Message) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj31 int
	var yyb31 bool
	var yyhl31 bool = l >= 0
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt33 := z.Extension(z.I2Rtid(x.Type)); yyxt33 != nil {
		z.DecExtension(x.Type, yyxt33)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Source = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Destination = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ContentType = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Accept = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Status != nil { // remove the if-true
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}
		*x.Status = (int64)(r.DecodeInt64())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.RequestDeliveryResponse != nil { // remove the if-true
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}
		*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Headers, d)
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.Metadata, d)
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceSlicestring((*[][]string)(&x.Spans), d)
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.IncludeSpans != nil { // remove the if-true
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}
		*x.IncludeSpans = (bool)(r.DecodeBool())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Path = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ServiceName = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.URL = (string)(string(r.DecodeStringAsBytes()))
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.PartnerIDs, d)
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = z.DecCheckBreak()
	}
	if yyb31 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.SessionID = (string)(string(r.DecodeStringAsBytes()))
	for {
		yyj31++
		if yyhl31 {
			yyb31 = yyj31 > l
		} else {
			yyb31 = z.DecCheckBreak()
		}
		if yyb31 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj31-1, "")
	}
}

func (x *SimpleRequestResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [14]bool{    // should field at this index be written?
			true,                             // Type
			true,                             // Source
			true,                             // Destination
			x.ContentType != "",              // ContentType
			x.Accept != "",                   // Accept
			x.TransactionUUID != "",          // TransactionUUID
			x.Status != nil,                  // Status
			x.RequestDeliveryResponse != nil, // RequestDeliveryResponse
			len(x.Headers) != 0,              // Headers
			len(x.Metadata) != 0,             // Metadata
			len(x.Spans) != 0,                // Spans
			x.IncludeSpans != nil,            // IncludeSpans
			len(x.Payload) != 0,              // Payload
			len(x.PartnerIDs) != 0,           // PartnerIDs
		}
		_ = yyq2
		var yyn9 bool = x.Status == nil
		var yyn10 bool = x.RequestDeliveryResponse == nil
		var yyn14 bool = x.IncludeSpans == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(14)
			z.EncWriteArrayElem()
			if yyxt17 := z.Extension(z.I2Rtid(x.Type)); yyxt17 != nil {
				z.EncExtension(x.Type, yyxt17)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Source))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Destination))
			z.EncWriteArrayElem()
			if yyq2[3] {
				r.EncodeString(string(x.ContentType))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[4] {
				r.EncodeString(string(x.Accept))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[5] {
				r.EncodeString(string(x.TransactionUUID))
			} else {
				r.EncodeString("")
			}
			if yyn9 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[6] {
					yy23 := *x.Status
					r.EncodeInt(int64(yy23))
				} else {
					r.EncodeNil()
				}
			}
			if yyn10 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[7] {
					yy25 := *x.RequestDeliveryResponse
					r.EncodeInt(int64(yy25))
				} else {
					r.EncodeNil()
				}
			}
			z.EncWriteArrayElem()
			if yyq2[8] {
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[9] {
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[10] {
				if x.Spans == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicestring(([][]string)(x.Spans), e)
				} // end block: if x.Spans slice == nil
			} else {
				r.EncodeNil()
			}
			if yyn14 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[11] {
					yy30 := *x.IncludeSpans
					r.EncodeBool(bool(yy30))
				} else {
					r.EncodeNil()
				}
			}
			z.EncWriteArrayElem()
			if yyq2[12] {
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[13] {
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt34 := z.Extension(z.I2Rtid(x.Type)); yyxt34 != nil {
				z.EncExtension(x.Type, yyxt34)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"source\"")
			} else {
				r.EncodeString(`source`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Source))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"dest\"")
			} else {
				r.EncodeString(`dest`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Destination))
			if yyq2[3] {
				z.EncWriteMapElemKey()
				r.EncodeString(`content_type`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ContentType))
			}
			if yyq2[4] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"accept\"")
				} else {
					r.EncodeString(`accept`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Accept))
			}
			if yyq2[5] {
				z.EncWriteMapElemKey()
				r.EncodeString(`transaction_uuid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.TransactionUUID))
			}
			if yyq2[6] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"status\"")
				} else {
					r.EncodeString(`status`)
				}
				z.EncWriteMapElemValue()
				if yyn9 {
					r.EncodeNil()
				} else {
					yy40 := *x.Status
					r.EncodeInt(int64(yy40))
				}
			}
			if yyq2[7] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"rdr\"")
				} else {
					r.EncodeString(`rdr`)
				}
				z.EncWriteMapElemValue()
				if yyn10 {
					r.EncodeNil()
				} else {
					yy42 := *x.RequestDeliveryResponse
					r.EncodeInt(int64(yy42))
				}
			}
			if yyq2[8] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"headers\"")
				} else {
					r.EncodeString(`headers`)
				}
				z.EncWriteMapElemValue()
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			}
			if yyq2[9] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"metadata\"")
				} else {
					r.EncodeString(`metadata`)
				}
				z.EncWriteMapElemValue()
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			}
			if yyq2[10] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"spans\"")
				} else {
					r.EncodeString(`spans`)
				}
				z.EncWriteMapElemValue()
				if x.Spans == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicestring(([][]string)(x.Spans), e)
				} // end block: if x.Spans slice == nil
			}
			if yyq2[11] {
				z.EncWriteMapElemKey()
				r.EncodeString(`include_spans`)
				z.EncWriteMapElemValue()
				if yyn14 {
					r.EncodeNil()
				} else {
					yy47 := *x.IncludeSpans
					r.EncodeBool(bool(yy47))
				}
			}
			if yyq2[12] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"payload\"")
				} else {
					r.EncodeString(`payload`)
				}
				z.EncWriteMapElemValue()
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			}
			if yyq2[13] {
				z.EncWriteMapElemKey()
				r.EncodeString(`partner_ids`)
				z.EncWriteMapElemValue()
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *SimpleRequestResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = SimpleRequestResponse{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *SimpleRequestResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		case "source":
			x.Source = (string)(string(r.DecodeStringAsBytes()))
		case "dest":
			x.Destination = (string)(string(r.DecodeStringAsBytes()))
		case "content_type":
			x.ContentType = (string)(string(r.DecodeStringAsBytes()))
		case "accept":
			x.Accept = (string)(string(r.DecodeStringAsBytes()))
		case "transaction_uuid":
			x.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
		case "status":
			if r.TryNil() {
				if x.Status != nil { // remove the if-true
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}
				*x.Status = (int64)(r.DecodeInt64())
			}
		case "rdr":
			if r.TryNil() {
				if x.RequestDeliveryResponse != nil { // remove the if-true
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}
				*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
			}
		case "headers":
			z.F.DecSliceStringX(&x.Headers, d)
		case "metadata":
			z.F.DecMapStringStringX(&x.Metadata, d)
		case "spans":
			h.decSliceSlicestring((*[][]string)(&x.Spans), d)
		case "include_spans":
			if r.TryNil() {
				if x.IncludeSpans != nil { // remove the if-true
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}
				*x.IncludeSpans = (bool)(r.DecodeBool())
			}
		case "payload":
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		case "partner_ids":
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *SimpleRequestResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj27 int
	var yyb27 bool
	var yyhl27 bool = l >= 0
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt29 := z.Extension(z.I2Rtid(x.Type)); yyxt29 != nil {
		z.DecExtension(x.Type, yyxt29)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Source = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Destination = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ContentType = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Accept = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Status != nil { // remove the if-true
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}
		*x.Status = (int64)(r.DecodeInt64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.RequestDeliveryResponse != nil { // remove the if-true
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}
		*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Headers, d)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.Metadata, d)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceSlicestring((*[][]string)(&x.Spans), d)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.IncludeSpans != nil { // remove the if-true
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}
		*x.IncludeSpans = (bool)(r.DecodeBool())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.PartnerIDs, d)
	for {
		yyj27++
		if yyhl27 {
			yyb27 = yyj27 > l
		} else {
			yyb27 = z.DecCheckBreak()
		}
		if yyb27 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj27-1, "")
	}
}

func (x *SimpleEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [9]bool{     // should field at this index be written?
			true,                   // Type
			true,                   // Source
			true,                   // Destination
			x.ContentType != "",    // ContentType
			len(x.Headers) != 0,    // Headers
			len(x.Metadata) != 0,   // Metadata
			len(x.Payload) != 0,    // Payload
			len(x.PartnerIDs) != 0, // PartnerIDs
			x.SessionID != "",      // SessionID
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(9)
			z.EncWriteArrayElem()
			if yyxt12 := z.Extension(z.I2Rtid(x.Type)); yyxt12 != nil {
				z.EncExtension(x.Type, yyxt12)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Source))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Destination))
			z.EncWriteArrayElem()
			if yyq2[3] {
				r.EncodeString(string(x.ContentType))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[4] {
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[5] {
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[6] {
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[7] {
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[8] {
				r.EncodeString(string(x.SessionID))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt21 := z.Extension(z.I2Rtid(x.Type)); yyxt21 != nil {
				z.EncExtension(x.Type, yyxt21)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"source\"")
			} else {
				r.EncodeString(`source`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Source))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"dest\"")
			} else {
				r.EncodeString(`dest`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Destination))
			if yyq2[3] {
				z.EncWriteMapElemKey()
				r.EncodeString(`content_type`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ContentType))
			}
			if yyq2[4] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"headers\"")
				} else {
					r.EncodeString(`headers`)
				}
				z.EncWriteMapElemValue()
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			}
			if yyq2[5] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"metadata\"")
				} else {
					r.EncodeString(`metadata`)
				}
				z.EncWriteMapElemValue()
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			}
			if yyq2[6] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"payload\"")
				} else {
					r.EncodeString(`payload`)
				}
				z.EncWriteMapElemValue()
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			}
			if yyq2[7] {
				z.EncWriteMapElemKey()
				r.EncodeString(`partner_ids`)
				z.EncWriteMapElemValue()
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			}
			if yyq2[8] {
				z.EncWriteMapElemKey()
				r.EncodeString(`session_id`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.SessionID))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *SimpleEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = SimpleEvent{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *SimpleEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		case "source":
			x.Source = (string)(string(r.DecodeStringAsBytes()))
		case "dest":
			x.Destination = (string)(string(r.DecodeStringAsBytes()))
		case "content_type":
			x.ContentType = (string)(string(r.DecodeStringAsBytes()))
		case "headers":
			z.F.DecSliceStringX(&x.Headers, d)
		case "metadata":
			z.F.DecMapStringStringX(&x.Metadata, d)
		case "payload":
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		case "partner_ids":
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		case "session_id":
			x.SessionID = (string)(string(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *SimpleEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt20 := z.Extension(z.I2Rtid(x.Type)); yyxt20 != nil {
		z.DecExtension(x.Type, yyxt20)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Source = (string)(string(r.DecodeStringAsBytes()))
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Destination = (string)(string(r.DecodeStringAsBytes()))
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ContentType = (string)(string(r.DecodeStringAsBytes()))
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Headers, d)
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.Metadata, d)
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.PartnerIDs, d)
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.SessionID = (string)(string(r.DecodeStringAsBytes()))
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = z.DecCheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj18-1, "")
	}
}

func (x *CRUD) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [14]bool{    // should field at this index be written?
			true,                             // Type
			true,                             // Source
			true,                             // Destination
			x.TransactionUUID != "",          // TransactionUUID
			x.ContentType != "",              // ContentType
			len(x.Headers) != 0,              // Headers
			len(x.Metadata) != 0,             // Metadata
			len(x.Spans) != 0,                // Spans
			x.IncludeSpans != nil,            // IncludeSpans
			x.Status != nil,                  // Status
			x.RequestDeliveryResponse != nil, // RequestDeliveryResponse
			true,                             // Path
			len(x.Payload) != 0,              // Payload
			len(x.PartnerIDs) != 0,           // PartnerIDs
		}
		_ = yyq2
		var yyn11 bool = x.IncludeSpans == nil
		var yyn12 bool = x.Status == nil
		var yyn13 bool = x.RequestDeliveryResponse == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(14)
			z.EncWriteArrayElem()
			if yyxt17 := z.Extension(z.I2Rtid(x.Type)); yyxt17 != nil {
				z.EncExtension(x.Type, yyxt17)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Source))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Destination))
			z.EncWriteArrayElem()
			if yyq2[3] {
				r.EncodeString(string(x.TransactionUUID))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[4] {
				r.EncodeString(string(x.ContentType))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[5] {
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[6] {
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[7] {
				if x.Spans == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicestring(([][]string)(x.Spans), e)
				} // end block: if x.Spans slice == nil
			} else {
				r.EncodeNil()
			}
			if yyn11 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[8] {
					yy25 := *x.IncludeSpans
					r.EncodeBool(bool(yy25))
				} else {
					r.EncodeNil()
				}
			}
			if yyn12 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[9] {
					yy27 := *x.Status
					r.EncodeInt(int64(yy27))
				} else {
					r.EncodeNil()
				}
			}
			if yyn13 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyq2[10] {
					yy29 := *x.RequestDeliveryResponse
					r.EncodeInt(int64(yy29))
				} else {
					r.EncodeNil()
				}
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Path))
			z.EncWriteArrayElem()
			if yyq2[12] {
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[13] {
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt34 := z.Extension(z.I2Rtid(x.Type)); yyxt34 != nil {
				z.EncExtension(x.Type, yyxt34)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"source\"")
			} else {
				r.EncodeString(`source`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Source))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"dest\"")
			} else {
				r.EncodeString(`dest`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Destination))
			if yyq2[3] {
				z.EncWriteMapElemKey()
				r.EncodeString(`transaction_uuid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.TransactionUUID))
			}
			if yyq2[4] {
				z.EncWriteMapElemKey()
				r.EncodeString(`content_type`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ContentType))
			}
			if yyq2[5] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"headers\"")
				} else {
					r.EncodeString(`headers`)
				}
				z.EncWriteMapElemValue()
				if x.Headers == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.Headers, e)
				} // end block: if x.Headers slice == nil
			}
			if yyq2[6] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"metadata\"")
				} else {
					r.EncodeString(`metadata`)
				}
				z.EncWriteMapElemValue()
				if x.Metadata == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringStringV(x.Metadata, e)
				} // end block: if x.Metadata map == nil
			}
			if yyq2[7] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"spans\"")
				} else {
					r.EncodeString(`spans`)
				}
				z.EncWriteMapElemValue()
				if x.Spans == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicestring(([][]string)(x.Spans), e)
				} // end block: if x.Spans slice == nil
			}
			if yyq2[8] {
				z.EncWriteMapElemKey()
				r.EncodeString(`include_spans`)
				z.EncWriteMapElemValue()
				if yyn11 {
					r.EncodeNil()
				} else {
					yy42 := *x.IncludeSpans
					r.EncodeBool(bool(yy42))
				}
			}
			if yyq2[9] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"status\"")
				} else {
					r.EncodeString(`status`)
				}
				z.EncWriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					yy44 := *x.Status
					r.EncodeInt(int64(yy44))
				}
			}
			if yyq2[10] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"rdr\"")
				} else {
					r.EncodeString(`rdr`)
				}
				z.EncWriteMapElemValue()
				if yyn13 {
					r.EncodeNil()
				} else {
					yy46 := *x.RequestDeliveryResponse
					r.EncodeInt(int64(yy46))
				}
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"path\"")
			} else {
				r.EncodeString(`path`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Path))
			if yyq2[12] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"payload\"")
				} else {
					r.EncodeString(`payload`)
				}
				z.EncWriteMapElemValue()
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Payload))
				} // end block: if x.Payload slice == nil
			}
			if yyq2[13] {
				z.EncWriteMapElemKey()
				r.EncodeString(`partner_ids`)
				z.EncWriteMapElemValue()
				if x.PartnerIDs == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.PartnerIDs, e)
				} // end block: if x.PartnerIDs slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *CRUD) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = CRUD{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *CRUD) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		case "source":
			x.Source = (string)(string(r.DecodeStringAsBytes()))
		case "dest":
			x.Destination = (string)(string(r.DecodeStringAsBytes()))
		case "transaction_uuid":
			x.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
		case "content_type":
			x.ContentType = (string)(string(r.DecodeStringAsBytes()))
		case "headers":
			z.F.DecSliceStringX(&x.Headers, d)
		case "metadata":
			z.F.DecMapStringStringX(&x.Metadata, d)
		case "spans":
			h.decSliceSlicestring((*[][]string)(&x.Spans), d)
		case "include_spans":
			if r.TryNil() {
				if x.IncludeSpans != nil { // remove the if-true
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}
				*x.IncludeSpans = (bool)(r.DecodeBool())
			}
		case "status":
			if r.TryNil() {
				if x.Status != nil { // remove the if-true
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}
				*x.Status = (int64)(r.DecodeInt64())
			}
		case "rdr":
			if r.TryNil() {
				if x.RequestDeliveryResponse != nil { // remove the if-true
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}
				*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
			}
		case "path":
			x.Path = (string)(string(r.DecodeStringAsBytes()))
		case "payload":
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		case "partner_ids":
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *CRUD) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj27 int
	var yyb27 bool
	var yyhl27 bool = l >= 0
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt29 := z.Extension(z.I2Rtid(x.Type)); yyxt29 != nil {
		z.DecExtension(x.Type, yyxt29)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Source = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Destination = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ContentType = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Headers, d)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.Metadata, d)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceSlicestring((*[][]string)(&x.Spans), d)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.IncludeSpans != nil { // remove the if-true
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}
		*x.IncludeSpans = (bool)(r.DecodeBool())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Status != nil { // remove the if-true
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}
		*x.Status = (int64)(r.DecodeInt64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.RequestDeliveryResponse != nil { // remove the if-true
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}
		*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Path = (string)(string(r.DecodeStringAsBytes()))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.PartnerIDs, d)
	for {
		yyj27++
		if yyhl27 {
			yyb27 = yyj27 > l
		} else {
			yyb27 = z.DecCheckBreak()
		}
		if yyb27 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj27-1, "")
	}
}

func (x *ServiceRegistration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			if yyxt6 := z.Extension(z.I2Rtid(x.Type)); yyxt6 != nil {
				z.EncExtension(x.Type, yyxt6)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.ServiceName))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.URL))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt9 := z.Extension(z.I2Rtid(x.Type)); yyxt9 != nil {
				z.EncExtension(x.Type, yyxt9)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteMapElemKey()
			r.EncodeString(`service_name`)
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.ServiceName))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"url\"")
			} else {
				r.EncodeString(`url`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.URL))
			z.EncWriteMapEnd()
		}
	}
}

func (x *ServiceRegistration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = ServiceRegistration{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *ServiceRegistration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		case "service_name":
			x.ServiceName = (string)(string(r.DecodeStringAsBytes()))
		case "url":
			x.URL = (string)(string(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *ServiceRegistration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt10 := z.Extension(z.I2Rtid(x.Type)); yyxt10 != nil {
		z.DecExtension(x.Type, yyxt10)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ServiceName = (string)(string(r.DecodeStringAsBytes()))
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.URL = (string)(string(r.DecodeStringAsBytes()))
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *ServiceAlive) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
				z.EncExtension(x.Type, yyxt4)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.EncExtension(x.Type, yyxt5)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *ServiceAlive) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = ServiceAlive{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *ServiceAlive) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *ServiceAlive) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt8 := z.Extension(z.I2Rtid(x.Type)); yyxt8 != nil {
		z.DecExtension(x.Type, yyxt8)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *Unknown) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
				z.EncExtension(x.Type, yyxt4)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			z.EncWriteMapElemKey()
			r.EncodeString(`msg_type`)
			z.EncWriteMapElemValue()
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.EncExtension(x.Type, yyxt5)
			} else {
				r.EncodeInt(int64(x.Type))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *Unknown) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil8417 {
		*(x) = Unknown{}
	} else if yyct2 == codecSelferValueTypeMap8417 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray8417 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct8417)
	}
}

func (x *Unknown) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
				z.DecExtension(x.Type, yyxt5)
			} else {
				x.Type = (MessageType)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Unknown) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt8 := z.Extension(z.I2Rtid(x.Type)); yyxt8 != nil {
		z.DecExtension(x.Type, yyxt8)
	} else {
		x.Type = (MessageType)(r.DecodeInt64())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x codecSelfer8417) encSliceSlicestring(v [][]string, e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			z.F.EncSliceStringV(yyv1, e)
		} // end block: if yyv1 slice == nil
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer8417) decSliceSlicestring(v *[][]string, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][]string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				z.F.DecSliceStringX(&yyv1[yyj1], d)
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer8417) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		r.EncodeString(string(yyv1))
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer8417) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer8417
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				yyv1[yyj1] = (string)(string(r.DecodeStringAsBytes()))
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
