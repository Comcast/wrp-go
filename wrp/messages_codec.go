// Code generated by codecgen - DO NOT EDIT.

package wrp

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF87849 = 1
	codecSelferCcRAW7849  = 0
	// ----- value types used ----
	codecSelferValueTypeArray7849  = 10
	codecSelferValueTypeMap7849    = 9
	codecSelferValueTypeString7849 = 6
	codecSelferValueTypeInt7849    = 2
	codecSelferValueTypeUint7849   = 3
	codecSelferValueTypeFloat7849  = 4
	codecSelferBitsize7849         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct7849 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer7849 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *Message) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [17]bool{    // should field at this index be written?
				true,                             // Type
				x.Source != "",                   // Source
				x.Destination != "",              // Destination
				x.TransactionUUID != "",          // TransactionUUID
				x.ContentType != "",              // ContentType
				x.Accept != "",                   // Accept
				x.Status != nil,                  // Status
				x.RequestDeliveryResponse != nil, // RequestDeliveryResponse
				len(x.Headers) != 0,              // Headers
				len(x.Metadata) != 0,             // Metadata
				len(x.Spans) != 0,                // Spans
				x.IncludeSpans != nil,            // IncludeSpans
				x.Path != "",                     // Path
				len(x.Payload) != 0,              // Payload
				x.ServiceName != "",              // ServiceName
				x.URL != "",                      // URL
				len(x.PartnerIDs) != 0,           // PartnerIDs
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(17)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Source))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"source\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `source`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Source))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"dest\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `dest`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.TransactionUUID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `transaction_uuid`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.TransactionUUID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `content_type`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Accept))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"accept\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `accept`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Accept))
					}
				}
			}
			var yyn21 bool
			if x.Status == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[6] {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy22 := *x.Status
							if false {
							} else {
								r.EncodeInt(int64(yy22))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"status\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `status`)
					}
					r.WriteMapElemValue()
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy24 := *x.Status
							if false {
							} else {
								r.EncodeInt(int64(yy24))
							}
						}
					}
				}
			}
			var yyn26 bool
			if x.RequestDeliveryResponse == nil {
				yyn26 = true
				goto LABEL26
			}
		LABEL26:
			if yyr2 || yy2arr2 {
				if yyn26 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[7] {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy27 := *x.RequestDeliveryResponse
							if false {
							} else {
								r.EncodeInt(int64(yy27))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"rdr\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `rdr`)
					}
					r.WriteMapElemValue()
					if yyn26 {
						r.EncodeNil()
					} else {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy29 := *x.RequestDeliveryResponse
							if false {
							} else {
								r.EncodeInt(int64(yy29))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"headers\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `headers`)
					}
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"spans\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `spans`)
					}
					r.WriteMapElemValue()
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				}
			}
			var yyn40 bool
			if x.IncludeSpans == nil {
				yyn40 = true
				goto LABEL40
			}
		LABEL40:
			if yyr2 || yy2arr2 {
				if yyn40 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[11] {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy41 := *x.IncludeSpans
							if false {
							} else {
								r.EncodeBool(bool(yy41))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `include_spans`)
					r.WriteMapElemValue()
					if yyn40 {
						r.EncodeNil()
					} else {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy43 := *x.IncludeSpans
							if false {
							} else {
								r.EncodeBool(bool(yy43))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"path\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `path`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Path))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"payload\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `payload`)
					}
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[14] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ServiceName))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[14] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `service_name`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ServiceName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[15] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.URL))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[15] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"url\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `url`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.URL))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[16] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[16] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `partner_ids`)
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Message) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *Message) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				x.Source = (string)(r.DecodeString())
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				x.Destination = (string)(r.DecodeString())
			}
		case "transaction_uuid":
			if r.TryDecodeAsNil() {
				x.TransactionUUID = ""
			} else {
				x.TransactionUUID = (string)(r.DecodeString())
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				x.ContentType = (string)(r.DecodeString())
			}
		case "accept":
			if r.TryDecodeAsNil() {
				x.Accept = ""
			} else {
				x.Accept = (string)(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				if true && x.Status != nil {
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}

				if false {
				} else {
					*x.Status = (int64)(r.DecodeInt64())
				}
			}
		case "rdr":
			if r.TryDecodeAsNil() {
				if true && x.RequestDeliveryResponse != nil {
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}

				if false {
				} else {
					*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
				}
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Headers, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "spans":
			if r.TryDecodeAsNil() {
				x.Spans = nil
			} else {
				if false {
				} else {
					h.decSliceSlicestring((*[][]string)(&x.Spans), d)
				}
			}
		case "include_spans":
			if r.TryDecodeAsNil() {
				if true && x.IncludeSpans != nil {
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}

				if false {
				} else {
					*x.IncludeSpans = (bool)(r.DecodeBool())
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = (string)(r.DecodeString())
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				if false {
				} else {
					x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
				}
			}
		case "service_name":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = (string)(r.DecodeString())
			}
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = (string)(r.DecodeString())
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.PartnerIDs, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Message) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt32 := z.Extension(z.I2Rtid(x.Type)); yyxt32 != nil {
			z.DecExtension(x.Type, yyxt32)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		x.Source = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		x.Destination = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionUUID = ""
	} else {
		x.TransactionUUID = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		x.ContentType = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Accept = ""
	} else {
		x.Accept = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Status != nil {
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}

		if false {
		} else {
			*x.Status = (int64)(r.DecodeInt64())
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.RequestDeliveryResponse != nil {
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}

		if false {
		} else {
			*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Headers, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = nil
	} else {
		if false {
		} else {
			h.decSliceSlicestring((*[][]string)(&x.Spans), d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.IncludeSpans != nil {
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}

		if false {
		} else {
			*x.IncludeSpans = (bool)(r.DecodeBool())
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		if false {
		} else {
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SimpleRequestResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [14]bool{    // should field at this index be written?
				true,                             // Type
				true,                             // Source
				true,                             // Destination
				x.ContentType != "",              // ContentType
				x.Accept != "",                   // Accept
				x.TransactionUUID != "",          // TransactionUUID
				x.Status != nil,                  // Status
				x.RequestDeliveryResponse != nil, // RequestDeliveryResponse
				len(x.Headers) != 0,              // Headers
				len(x.Metadata) != 0,             // Metadata
				len(x.Spans) != 0,                // Spans
				x.IncludeSpans != nil,            // IncludeSpans
				len(x.Payload) != 0,              // Payload
				len(x.PartnerIDs) != 0,           // PartnerIDs
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(14)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Source))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"source\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `source`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Source))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"dest\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `dest`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `content_type`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Accept))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"accept\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `accept`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.Accept))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.TransactionUUID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `transaction_uuid`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.TransactionUUID))
					}
				}
			}
			var yyn21 bool
			if x.Status == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[6] {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy22 := *x.Status
							if false {
							} else {
								r.EncodeInt(int64(yy22))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"status\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `status`)
					}
					r.WriteMapElemValue()
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy24 := *x.Status
							if false {
							} else {
								r.EncodeInt(int64(yy24))
							}
						}
					}
				}
			}
			var yyn26 bool
			if x.RequestDeliveryResponse == nil {
				yyn26 = true
				goto LABEL26
			}
		LABEL26:
			if yyr2 || yy2arr2 {
				if yyn26 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[7] {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy27 := *x.RequestDeliveryResponse
							if false {
							} else {
								r.EncodeInt(int64(yy27))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"rdr\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `rdr`)
					}
					r.WriteMapElemValue()
					if yyn26 {
						r.EncodeNil()
					} else {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy29 := *x.RequestDeliveryResponse
							if false {
							} else {
								r.EncodeInt(int64(yy29))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"headers\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `headers`)
					}
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"spans\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `spans`)
					}
					r.WriteMapElemValue()
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				}
			}
			var yyn40 bool
			if x.IncludeSpans == nil {
				yyn40 = true
				goto LABEL40
			}
		LABEL40:
			if yyr2 || yy2arr2 {
				if yyn40 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[11] {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy41 := *x.IncludeSpans
							if false {
							} else {
								r.EncodeBool(bool(yy41))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `include_spans`)
					r.WriteMapElemValue()
					if yyn40 {
						r.EncodeNil()
					} else {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy43 := *x.IncludeSpans
							if false {
							} else {
								r.EncodeBool(bool(yy43))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"payload\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `payload`)
					}
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `partner_ids`)
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SimpleRequestResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *SimpleRequestResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				x.Source = (string)(r.DecodeString())
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				x.Destination = (string)(r.DecodeString())
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				x.ContentType = (string)(r.DecodeString())
			}
		case "accept":
			if r.TryDecodeAsNil() {
				x.Accept = ""
			} else {
				x.Accept = (string)(r.DecodeString())
			}
		case "transaction_uuid":
			if r.TryDecodeAsNil() {
				x.TransactionUUID = ""
			} else {
				x.TransactionUUID = (string)(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				if true && x.Status != nil {
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}

				if false {
				} else {
					*x.Status = (int64)(r.DecodeInt64())
				}
			}
		case "rdr":
			if r.TryDecodeAsNil() {
				if true && x.RequestDeliveryResponse != nil {
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}

				if false {
				} else {
					*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
				}
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Headers, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "spans":
			if r.TryDecodeAsNil() {
				x.Spans = nil
			} else {
				if false {
				} else {
					h.decSliceSlicestring((*[][]string)(&x.Spans), d)
				}
			}
		case "include_spans":
			if r.TryDecodeAsNil() {
				if true && x.IncludeSpans != nil {
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}

				if false {
				} else {
					*x.IncludeSpans = (bool)(r.DecodeBool())
				}
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				if false {
				} else {
					x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.PartnerIDs, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SimpleRequestResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj27 int
	var yyb27 bool
	var yyhl27 bool = l >= 0
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt29 := z.Extension(z.I2Rtid(x.Type)); yyxt29 != nil {
			z.DecExtension(x.Type, yyxt29)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		x.Source = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		x.Destination = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		x.ContentType = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Accept = ""
	} else {
		x.Accept = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionUUID = ""
	} else {
		x.TransactionUUID = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Status != nil {
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}

		if false {
		} else {
			*x.Status = (int64)(r.DecodeInt64())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.RequestDeliveryResponse != nil {
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}

		if false {
		} else {
			*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Headers, d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = nil
	} else {
		if false {
		} else {
			h.decSliceSlicestring((*[][]string)(&x.Spans), d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.IncludeSpans != nil {
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}

		if false {
		} else {
			*x.IncludeSpans = (bool)(r.DecodeBool())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		if false {
		} else {
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		}
	}
	for {
		yyj27++
		if yyhl27 {
			yyb27 = yyj27 > l
		} else {
			yyb27 = r.CheckBreak()
		}
		if yyb27 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj27-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SimpleEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [8]bool{     // should field at this index be written?
				true,                   // Type
				true,                   // Source
				true,                   // Destination
				x.ContentType != "",    // ContentType
				len(x.Headers) != 0,    // Headers
				len(x.Metadata) != 0,   // Metadata
				len(x.Payload) != 0,    // Payload
				len(x.PartnerIDs) != 0, // PartnerIDs
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Source))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"source\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `source`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Source))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"dest\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `dest`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `content_type`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"headers\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `headers`)
					}
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"payload\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `payload`)
					}
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `partner_ids`)
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SimpleEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *SimpleEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				x.Source = (string)(r.DecodeString())
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				x.Destination = (string)(r.DecodeString())
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				x.ContentType = (string)(r.DecodeString())
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Headers, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				if false {
				} else {
					x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.PartnerIDs, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SimpleEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt19 := z.Extension(z.I2Rtid(x.Type)); yyxt19 != nil {
			z.DecExtension(x.Type, yyxt19)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		x.Source = (string)(r.DecodeString())
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		x.Destination = (string)(r.DecodeString())
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		x.ContentType = (string)(r.DecodeString())
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Headers, d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		if false {
		} else {
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		}
	}
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = r.CheckBreak()
		}
		if yyb17 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj17-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CRUD) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [14]bool{    // should field at this index be written?
				true,                             // Type
				true,                             // Source
				true,                             // Destination
				x.TransactionUUID != "",          // TransactionUUID
				x.ContentType != "",              // ContentType
				len(x.Headers) != 0,              // Headers
				len(x.Metadata) != 0,             // Metadata
				len(x.Spans) != 0,                // Spans
				x.IncludeSpans != nil,            // IncludeSpans
				x.Status != nil,                  // Status
				x.RequestDeliveryResponse != nil, // RequestDeliveryResponse
				true,                             // Path
				len(x.Payload) != 0,              // Payload
				len(x.PartnerIDs) != 0,           // PartnerIDs
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(14)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Source))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"source\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `source`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Source))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"dest\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `dest`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Destination))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.TransactionUUID))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `transaction_uuid`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.TransactionUUID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferCcUTF87849, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `content_type`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF87849, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"headers\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `headers`)
					}
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"metadata\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `metadata`)
					}
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"spans\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `spans`)
					}
					r.WriteMapElemValue()
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				}
			}
			var yyn27 bool
			if x.IncludeSpans == nil {
				yyn27 = true
				goto LABEL27
			}
		LABEL27:
			if yyr2 || yy2arr2 {
				if yyn27 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[8] {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy28 := *x.IncludeSpans
							if false {
							} else {
								r.EncodeBool(bool(yy28))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `include_spans`)
					r.WriteMapElemValue()
					if yyn27 {
						r.EncodeNil()
					} else {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy30 := *x.IncludeSpans
							if false {
							} else {
								r.EncodeBool(bool(yy30))
							}
						}
					}
				}
			}
			var yyn32 bool
			if x.Status == nil {
				yyn32 = true
				goto LABEL32
			}
		LABEL32:
			if yyr2 || yy2arr2 {
				if yyn32 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[9] {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy33 := *x.Status
							if false {
							} else {
								r.EncodeInt(int64(yy33))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"status\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `status`)
					}
					r.WriteMapElemValue()
					if yyn32 {
						r.EncodeNil()
					} else {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy35 := *x.Status
							if false {
							} else {
								r.EncodeInt(int64(yy35))
							}
						}
					}
				}
			}
			var yyn37 bool
			if x.RequestDeliveryResponse == nil {
				yyn37 = true
				goto LABEL37
			}
		LABEL37:
			if yyr2 || yy2arr2 {
				if yyn37 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[10] {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy38 := *x.RequestDeliveryResponse
							if false {
							} else {
								r.EncodeInt(int64(yy38))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"rdr\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `rdr`)
					}
					r.WriteMapElemValue()
					if yyn37 {
						r.EncodeNil()
					} else {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy40 := *x.RequestDeliveryResponse
							if false {
							} else {
								r.EncodeInt(int64(yy40))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Path))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"path\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `path`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"payload\"")
					} else {
						r.EncodeString(codecSelferCcUTF87849, `payload`)
					}
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytes(codecSelferCcRAW7849, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF87849, `partner_ids`)
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CRUD) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *CRUD) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				x.Source = (string)(r.DecodeString())
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				x.Destination = (string)(r.DecodeString())
			}
		case "transaction_uuid":
			if r.TryDecodeAsNil() {
				x.TransactionUUID = ""
			} else {
				x.TransactionUUID = (string)(r.DecodeString())
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				x.ContentType = (string)(r.DecodeString())
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Headers, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Metadata, d)
				}
			}
		case "spans":
			if r.TryDecodeAsNil() {
				x.Spans = nil
			} else {
				if false {
				} else {
					h.decSliceSlicestring((*[][]string)(&x.Spans), d)
				}
			}
		case "include_spans":
			if r.TryDecodeAsNil() {
				if true && x.IncludeSpans != nil {
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}

				if false {
				} else {
					*x.IncludeSpans = (bool)(r.DecodeBool())
				}
			}
		case "status":
			if r.TryDecodeAsNil() {
				if true && x.Status != nil {
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}

				if false {
				} else {
					*x.Status = (int64)(r.DecodeInt64())
				}
			}
		case "rdr":
			if r.TryDecodeAsNil() {
				if true && x.RequestDeliveryResponse != nil {
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}

				if false {
				} else {
					*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = (string)(r.DecodeString())
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				if false {
				} else {
					x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.PartnerIDs, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CRUD) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj27 int
	var yyb27 bool
	var yyhl27 bool = l >= 0
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt29 := z.Extension(z.I2Rtid(x.Type)); yyxt29 != nil {
			z.DecExtension(x.Type, yyxt29)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		x.Source = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		x.Destination = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionUUID = ""
	} else {
		x.TransactionUUID = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		x.ContentType = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Headers, d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Metadata, d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = nil
	} else {
		if false {
		} else {
			h.decSliceSlicestring((*[][]string)(&x.Spans), d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.IncludeSpans != nil {
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}

		if false {
		} else {
			*x.IncludeSpans = (bool)(r.DecodeBool())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Status != nil {
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}

		if false {
		} else {
			*x.Status = (int64)(r.DecodeInt64())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.RequestDeliveryResponse != nil {
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}

		if false {
		} else {
			*x.RequestDeliveryResponse = (int64)(r.DecodeInt64())
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = (string)(r.DecodeString())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		if false {
		} else {
			x.Payload = r.DecodeBytes(([]byte)(x.Payload), false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.PartnerIDs, d)
		}
	}
	for {
		yyj27++
		if yyhl27 {
			yyb27 = yyj27 > l
		} else {
			yyb27 = r.CheckBreak()
		}
		if yyb27 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj27-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceRegistration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.ServiceName))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `service_name`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.ServiceName))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.URL))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"url\"")
				} else {
					r.EncodeString(codecSelferCcUTF87849, `url`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF87849, string(x.URL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ServiceRegistration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *ServiceRegistration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		case "service_name":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = (string)(r.DecodeString())
			}
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ServiceRegistration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt10 := z.Extension(z.I2Rtid(x.Type)); yyxt10 != nil {
			z.DecExtension(x.Type, yyxt10)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAlive) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ServiceAlive) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *ServiceAlive) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ServiceAlive) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt8 := z.Extension(z.I2Rtid(x.Type)); yyxt8 != nil {
			z.DecExtension(x.Type, yyxt8)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Unknown) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Type)); yyxt4 != nil {
					z.EncExtension(x.Type, yyxt4)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF87849, `msg_type`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.EncExtension(x.Type, yyxt5)
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Unknown) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7849 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7849 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7849)
		}
	}
}

func (x *Unknown) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Type)); yyxt5 != nil {
					z.DecExtension(x.Type, yyxt5)
				} else {
					x.Type = (MessageType)(r.DecodeInt64())
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Unknown) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		if false {
		} else if yyxt8 := z.Extension(z.I2Rtid(x.Type)); yyxt8 != nil {
			z.DecExtension(x.Type, yyxt8)
		} else {
			x.Type = (MessageType)(r.DecodeInt64())
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer7849) encSliceSlicestring(v [][]string, e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.F.EncSliceStringV(yyv1, e)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer7849) decSliceSlicestring(v *[][]string, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][]string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if false {
					} else {
						z.F.DecSliceStringX(&yyv1[yyj1], d)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer7849) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeString(codecSelferCcUTF87849, string(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer7849) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer7849
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv1[yyj1] = (string)(r.DecodeString())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
